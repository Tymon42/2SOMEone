// Code generated by goctl. DO NOT EDIT!

package basic_user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	basicUsersFieldNames          = builder.RawFieldNames(&BasicUsers{})
	basicUsersRows                = strings.Join(basicUsersFieldNames, ",")
	basicUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(basicUsersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	basicUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(basicUsersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	basicUsersModel interface {
		Insert(ctx context.Context, data *BasicUsers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BasicUsers, error)
		FindOneByPhone(ctx context.Context, phone string) (*BasicUsers, error)
		FindOneByUserId(ctx context.Context, user_id string) (*BasicUsers, error)
		Update(ctx context.Context, data *BasicUsers) error
		Delete(ctx context.Context, id int64) error
		DeleteByUserId(ctx context.Context, user_id string) error
	}

	defaultBasicUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BasicUsers struct {
		Id        int64          `db:"id"`
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
		DeletedAt sql.NullTime   `db:"deleted_at"`
		UserId    sql.NullString `db:"user_id"`
		Name      sql.NullString `db:"name"`
		Phone     sql.NullString `db:"phone"`
		Email     sql.NullString `db:"email"`
		Password  sql.NullString `db:"password"`
		Lang      string         `db:"lang"`
		Avatar    sql.NullString `db:"avatar"`
		State     string         `db:"state"`
	}
)

func newBasicUsersModel(conn sqlx.SqlConn) *defaultBasicUsersModel {
	return &defaultBasicUsersModel{
		conn:  conn,
		table: "`basic_users`",
	}
}

// 根据 主键id 删除
func (m *defaultBasicUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `deleted_at`=?  where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, &sql.NullTime{Time: time.Now(), Valid: true}, id)
	return err
}

// 根据 用户UUID 删除
func (m *defaultBasicUsersModel) DeleteByUserId(ctx context.Context, user_id string) error {
	query := fmt.Sprintf("update %s set `deleted_at`=?  where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, &sql.NullTime{Time: time.Now(), Valid: true}, user_id)
	return err
}

// 根据 主键id 查询
func (m *defaultBasicUsersModel) FindOne(ctx context.Context, id int64) (*BasicUsers, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND `deleted_at` is NULL limit 1", basicUsersRows, m.table)
	var resp BasicUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据 手机号 查询
func (m *defaultBasicUsersModel) FindOneByPhone(ctx context.Context, phone string) (*BasicUsers, error) {
	query := fmt.Sprintf("select %s from %s where `phone` = ? AND `deleted_at` is NULL limit 1", basicUsersRows, m.table)
	var resp BasicUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据 user_id 查询
func (m *defaultBasicUsersModel) FindOneByUserId(ctx context.Context, user_id string) (*BasicUsers, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? AND `deleted_at` is NULL limit 1", basicUsersRows, m.table)
	var resp BasicUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, user_id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 插入用户记录
func (m *defaultBasicUsersModel) Insert(ctx context.Context, data *BasicUsers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, basicUsersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, &sql.NullTime{Time: time.Now(), Valid: true}, data.UpdatedAt, data.DeletedAt, data.UserId, data.Name, data.Phone, data.Email, data.Password, data.Lang, data.Avatar, data.State)
	return ret, err
}

// 更新用户记录
//func (m *defaultBasicUsersModel) Update(ctx context.Context, data *BasicUsers) error {
//	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, basicUsersRowsWithPlaceHolder)
//	// TODO: 创建时间create_at 不需要更新
//	_, err := m.conn.ExecCtx(ctx, query, data.CreatedAt, &sql.NullTime{Time: time.Now(), Valid: true}, data.DeletedAt, data.UserId, data.Name, data.Phone, data.Email, data.Password, data.Lang, data.Avatar, data.State, data.Id)
//	return err
//}
func (m *defaultBasicUsersModel) Update(ctx context.Context, data *BasicUsers) error {
	query := fmt.Sprintf("update %s set (`created_at`=?,`updated_at`=?,`deleted_at`=?,`user_id`=?,`name`=?,`phone`=?,`email`=?,`password`=?,`lang`=?,`avatar`=?,`state`=?) where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, data.CreatedAt, &sql.NullTime{Time: time.Now(), Valid: true}, data.DeletedAt, data.UserId, data.Name, data.Phone, data.Email, data.Password, data.Lang, data.Avatar, data.State, data.Id)
	return err
}

func (m *defaultBasicUsersModel) tableName() string {
	return m.table
}
